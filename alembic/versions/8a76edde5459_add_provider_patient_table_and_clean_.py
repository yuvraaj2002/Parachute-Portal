"""add_provider_patient_table_and_clean_schema

Revision ID: 8a76edde5459
Revises: 11e6a58a23a0
Create Date: 2025-09-15 11:39:27.786980

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8a76edde5459'
down_revision: Union[str, Sequence[str], None] = '11e6a58a23a0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('provider_patients',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('date_ordered', sa.DateTime(), nullable=False),
    sa.Column('order_type', sa.String(length=100), nullable=False),
    sa.Column('patient_name', sa.String(length=200), nullable=False),
    sa.Column('patient_dob', sa.DateTime(), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('medication_ordered', sa.String(length=200), nullable=False),
    sa.Column('patient_shipping_address', sa.Text(), nullable=False),
    sa.Column('referred_by', sa.String(length=200), nullable=True),
    sa.Column('payment_status', sa.String(length=50), nullable=False),
    sa.Column('payment_amount', sa.Float(), nullable=True),
    sa.Column('shipping_payment', sa.Float(), nullable=True),
    sa.Column('shipping_status', sa.String(length=50), nullable=False),
    sa.Column('tracking_number', sa.String(length=100), nullable=True),
    sa.Column('date_delivered', sa.DateTime(), nullable=True),
    sa.Column('invoice_receipt', sa.String(length=500), nullable=True),
    sa.Column('pickup_or_delivery', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_provider_patients_created_at', 'provider_patients', ['created_at'], unique=False)
    op.create_index('idx_provider_patients_date_ordered', 'provider_patients', ['date_ordered'], unique=False)
    op.create_index('idx_provider_patients_patient_name', 'provider_patients', ['patient_name'], unique=False)
    op.create_index('idx_provider_patients_payment_status', 'provider_patients', ['payment_status'], unique=False)
    op.create_index('idx_provider_patients_shipping_status', 'provider_patients', ['shipping_status'], unique=False)
    op.create_index('idx_provider_patients_tracking_number', 'provider_patients', ['tracking_number'], unique=False)
    
    # Drop dependent tables first (in correct order to avoid foreign key constraint issues)
    op.drop_table('staff_tasks')
    op.drop_table('ticket_notes')
    op.drop_table('patient_communications')
    op.drop_table('patient_forms')
    op.drop_table('fulfillment_records')
    op.drop_table('refill_schedules')
    op.drop_table('insurance_verifications')
    op.drop_table('pa_requests')
    op.drop_table('billing_entries')  # Drop billing_entries before patient_tickets
    op.drop_index(op.f('ix_patient_tickets_parachute_case_id'), table_name='patient_tickets')
    op.drop_index(op.f('ix_patient_tickets_ticket_number'), table_name='patient_tickets')
    op.drop_table('patient_tickets')  # Drop patient_tickets last
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('billing_entries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payer_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('submission_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('amount_billed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('claim_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('NOT_READY', 'READY', 'SUBMITTED', 'PAID', 'DENIED', 'RESUBMITTED', name='billing_status_enum'), autoincrement=False, nullable=False),
    sa.Column('resubmission_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('original_claim_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('cmn_file_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('pa_file_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('rx_file_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('eligibility_screenshot_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('billing_entries_patient_ticket_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('billing_entries_pkey'))
    )
    op.create_table('patient_tickets',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('patient_tickets_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('parachute_case_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('ticket_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('patient_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('patient_dob', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('patient_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('patient_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('product_requested', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('hcpcs_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('diagnosis_icd10', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('prescription_file_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('insurance_provider', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('insurance_group_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('insurance_member_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('insurance_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ordering_provider_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('provider_npi', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('referral_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('qualified_flag', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ticket_status', postgresql.ENUM('READY_FOR_REVIEW', 'NEEDS_PA', 'PA_SUBMITTED', 'PA_APPROVED', 'PA_DENIED', 'READY_FOR_BILLING', 'BILLED', 'PAID', 'DENIED', 'READY_FOR_FULFILLMENT', 'FULFILLED', 'DELIVERED', 'COMPLETED', 'CANCELLED', name='ticket_status_enum'), autoincrement=False, nullable=True),
    sa.Column('pa_required', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('pa_status', postgresql.ENUM('NOT_REQUIRED', 'REQUIRED', 'SUBMITTED', 'APPROVED', 'DENIED', 'PENDING', name='pa_status_enum'), autoincrement=False, nullable=True),
    sa.Column('billing_status', postgresql.ENUM('NOT_READY', 'READY', 'SUBMITTED', 'PAID', 'DENIED', 'RESUBMITTED', name='billing_status_enum'), autoincrement=False, nullable=True),
    sa.Column('fulfillment_status', postgresql.ENUM('NOT_READY', 'READY', 'PACKED', 'SHIPPED', 'DELIVERED', name='fulfillment_status_enum'), autoincrement=False, nullable=True),
    sa.Column('assigned_staff_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_staff_id'], ['users.id'], name='patient_tickets_assigned_staff_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='patient_tickets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_patient_tickets_ticket_number'), 'patient_tickets', ['ticket_number'], unique=True)
    op.create_index(op.f('ix_patient_tickets_parachute_case_id'), 'patient_tickets', ['parachute_case_id'], unique=True)
    op.create_table('pa_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pa_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('request_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('submission_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('response_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('NOT_REQUIRED', 'REQUIRED', 'SUBMITTED', 'APPROVED', 'DENIED', 'PENDING', name='pa_status_enum'), autoincrement=False, nullable=False),
    sa.Column('request_file_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('response_file_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('pa_requests_patient_ticket_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('pa_requests_pkey'))
    )
    op.create_table('insurance_verifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('verification_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('verified_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('verification_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('deductible_met', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('deductible_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('deductible_remaining', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('coverage_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('allowed_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('estimated_patient_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('insurance_portion', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('verification_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('insurance_verifications_patient_ticket_id_fkey')),
    sa.ForeignKeyConstraint(['verified_by'], ['users.id'], name=op.f('insurance_verifications_verified_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('insurance_verifications_pkey'))
    )
    op.create_table('refill_schedules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('refill_cycle_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('next_refill_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_refill_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('refill_sent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('refill_sent_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('patient_notified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('staff_reminder_sent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('refill_schedules_patient_ticket_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('refill_schedules_pkey'))
    )
    op.create_table('fulfillment_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('order_packed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('shipped_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('delivered_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('shipping_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tracking_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('carrier', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('NOT_READY', 'READY', 'PACKED', 'SHIPPED', 'DELIVERED', name='fulfillment_status_enum'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('fulfillment_records_patient_ticket_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('fulfillment_records_pkey'))
    )
    op.create_table('patient_forms',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('form_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('form_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('form_url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'SENT', 'COMPLETED', 'OVERDUE', name='form_status_enum'), autoincrement=False, nullable=True),
    sa.Column('sent_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('patient_response_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('signature_received', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('auto_fill_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('patient_forms_patient_ticket_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('patient_forms_pkey'))
    )
    op.create_table('patient_communications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('communication_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('message_content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message_subject', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('sent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sent_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('delivered', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('delivered_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('trigger_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('automated', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('recipient_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('recipient_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('patient_communications_patient_ticket_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('patient_communications_pkey'))
    )
    op.create_table('ticket_notes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('staff_member_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('note_content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('note_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('ticket_notes_patient_ticket_id_fkey')),
    sa.ForeignKeyConstraint(['staff_member_id'], ['users.id'], name=op.f('ticket_notes_staff_member_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ticket_notes_pkey'))
    )
    op.create_table('staff_tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('patient_ticket_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assigned_staff_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('task_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('task_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('completed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_staff_id'], ['users.id'], name=op.f('staff_tasks_assigned_staff_id_fkey')),
    sa.ForeignKeyConstraint(['patient_ticket_id'], ['patient_tickets.id'], name=op.f('staff_tasks_patient_ticket_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('staff_tasks_pkey'))
    )
    op.drop_index('idx_provider_patients_tracking_number', table_name='provider_patients')
    op.drop_index('idx_provider_patients_shipping_status', table_name='provider_patients')
    op.drop_index('idx_provider_patients_payment_status', table_name='provider_patients')
    op.drop_index('idx_provider_patients_patient_name', table_name='provider_patients')
    op.drop_index('idx_provider_patients_date_ordered', table_name='provider_patients')
    op.drop_index('idx_provider_patients_created_at', table_name='provider_patients')
    op.drop_table('provider_patients')
    # ### end Alembic commands ###
